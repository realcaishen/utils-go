// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/realcaishen/utils-go/dal/model"
)

func newTNodeInfo(db *gorm.DB, opts ...gen.DOOption) tNodeInfo {
	_tNodeInfo := tNodeInfo{}

	_tNodeInfo.tNodeInfoDo.UseDB(db, opts...)
	_tNodeInfo.tNodeInfoDo.UseModel(&model.TNodeInfo{})

	tableName := _tNodeInfo.tNodeInfoDo.TableName()
	_tNodeInfo.ALL = field.NewAsterisk(tableName)
	_tNodeInfo.ID = field.NewInt64(tableName, "id")
	_tNodeInfo.UpdateTimestamp = field.NewTime(tableName, "update_timestamp")
	_tNodeInfo.InsertTimestamp = field.NewTime(tableName, "insert_timestamp")
	_tNodeInfo.ChainID = field.NewInt64(tableName, "chain_id")
	_tNodeInfo.RPCURL = field.NewString(tableName, "rpc_url")
	_tNodeInfo.Type = field.NewInt32(tableName, "type")
	_tNodeInfo.Usability = field.NewInt32(tableName, "usability")

	_tNodeInfo.fillFieldMap()

	return _tNodeInfo
}

type tNodeInfo struct {
	tNodeInfoDo tNodeInfoDo

	ALL             field.Asterisk
	ID              field.Int64
	UpdateTimestamp field.Time
	InsertTimestamp field.Time
	ChainID         field.Int64
	RPCURL          field.String
	Type            field.Int32
	Usability       field.Int32

	fieldMap map[string]field.Expr
}

func (t tNodeInfo) Table(newTableName string) *tNodeInfo {
	t.tNodeInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNodeInfo) As(alias string) *tNodeInfo {
	t.tNodeInfoDo.DO = *(t.tNodeInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNodeInfo) updateTableName(table string) *tNodeInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UpdateTimestamp = field.NewTime(table, "update_timestamp")
	t.InsertTimestamp = field.NewTime(table, "insert_timestamp")
	t.ChainID = field.NewInt64(table, "chain_id")
	t.RPCURL = field.NewString(table, "rpc_url")
	t.Type = field.NewInt32(table, "type")
	t.Usability = field.NewInt32(table, "usability")

	t.fillFieldMap()

	return t
}

func (t *tNodeInfo) WithContext(ctx context.Context) ITNodeInfoDo {
	return t.tNodeInfoDo.WithContext(ctx)
}

func (t tNodeInfo) TableName() string { return t.tNodeInfoDo.TableName() }

func (t tNodeInfo) Alias() string { return t.tNodeInfoDo.Alias() }

func (t tNodeInfo) Columns(cols ...field.Expr) gen.Columns { return t.tNodeInfoDo.Columns(cols...) }

func (t *tNodeInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNodeInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["update_timestamp"] = t.UpdateTimestamp
	t.fieldMap["insert_timestamp"] = t.InsertTimestamp
	t.fieldMap["chain_id"] = t.ChainID
	t.fieldMap["rpc_url"] = t.RPCURL
	t.fieldMap["type"] = t.Type
	t.fieldMap["usability"] = t.Usability
}

func (t tNodeInfo) clone(db *gorm.DB) tNodeInfo {
	t.tNodeInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNodeInfo) replaceDB(db *gorm.DB) tNodeInfo {
	t.tNodeInfoDo.ReplaceDB(db)
	return t
}

type tNodeInfoDo struct{ gen.DO }

type ITNodeInfoDo interface {
	gen.SubQuery
	Debug() ITNodeInfoDo
	WithContext(ctx context.Context) ITNodeInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITNodeInfoDo
	WriteDB() ITNodeInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITNodeInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITNodeInfoDo
	Not(conds ...gen.Condition) ITNodeInfoDo
	Or(conds ...gen.Condition) ITNodeInfoDo
	Select(conds ...field.Expr) ITNodeInfoDo
	Where(conds ...gen.Condition) ITNodeInfoDo
	Order(conds ...field.Expr) ITNodeInfoDo
	Distinct(cols ...field.Expr) ITNodeInfoDo
	Omit(cols ...field.Expr) ITNodeInfoDo
	Join(table schema.Tabler, on ...field.Expr) ITNodeInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITNodeInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITNodeInfoDo
	Group(cols ...field.Expr) ITNodeInfoDo
	Having(conds ...gen.Condition) ITNodeInfoDo
	Limit(limit int) ITNodeInfoDo
	Offset(offset int) ITNodeInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITNodeInfoDo
	Unscoped() ITNodeInfoDo
	Create(values ...*model.TNodeInfo) error
	CreateInBatches(values []*model.TNodeInfo, batchSize int) error
	Save(values ...*model.TNodeInfo) error
	First() (*model.TNodeInfo, error)
	Take() (*model.TNodeInfo, error)
	Last() (*model.TNodeInfo, error)
	Find() ([]*model.TNodeInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNodeInfo, err error)
	FindInBatches(result *[]*model.TNodeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TNodeInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITNodeInfoDo
	Assign(attrs ...field.AssignExpr) ITNodeInfoDo
	Joins(fields ...field.RelationField) ITNodeInfoDo
	Preload(fields ...field.RelationField) ITNodeInfoDo
	FirstOrInit() (*model.TNodeInfo, error)
	FirstOrCreate() (*model.TNodeInfo, error)
	FindByPage(offset int, limit int) (result []*model.TNodeInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITNodeInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tNodeInfoDo) Debug() ITNodeInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tNodeInfoDo) WithContext(ctx context.Context) ITNodeInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNodeInfoDo) ReadDB() ITNodeInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNodeInfoDo) WriteDB() ITNodeInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNodeInfoDo) Session(config *gorm.Session) ITNodeInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNodeInfoDo) Clauses(conds ...clause.Expression) ITNodeInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNodeInfoDo) Returning(value interface{}, columns ...string) ITNodeInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNodeInfoDo) Not(conds ...gen.Condition) ITNodeInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNodeInfoDo) Or(conds ...gen.Condition) ITNodeInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNodeInfoDo) Select(conds ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNodeInfoDo) Where(conds ...gen.Condition) ITNodeInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNodeInfoDo) Order(conds ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNodeInfoDo) Distinct(cols ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNodeInfoDo) Omit(cols ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNodeInfoDo) Join(table schema.Tabler, on ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNodeInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNodeInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNodeInfoDo) Group(cols ...field.Expr) ITNodeInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNodeInfoDo) Having(conds ...gen.Condition) ITNodeInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNodeInfoDo) Limit(limit int) ITNodeInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNodeInfoDo) Offset(offset int) ITNodeInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNodeInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITNodeInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNodeInfoDo) Unscoped() ITNodeInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNodeInfoDo) Create(values ...*model.TNodeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNodeInfoDo) CreateInBatches(values []*model.TNodeInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNodeInfoDo) Save(values ...*model.TNodeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNodeInfoDo) First() (*model.TNodeInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNodeInfo), nil
	}
}

func (t tNodeInfoDo) Take() (*model.TNodeInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNodeInfo), nil
	}
}

func (t tNodeInfoDo) Last() (*model.TNodeInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNodeInfo), nil
	}
}

func (t tNodeInfoDo) Find() ([]*model.TNodeInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNodeInfo), err
}

func (t tNodeInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNodeInfo, err error) {
	buf := make([]*model.TNodeInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNodeInfoDo) FindInBatches(result *[]*model.TNodeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNodeInfoDo) Attrs(attrs ...field.AssignExpr) ITNodeInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNodeInfoDo) Assign(attrs ...field.AssignExpr) ITNodeInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNodeInfoDo) Joins(fields ...field.RelationField) ITNodeInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNodeInfoDo) Preload(fields ...field.RelationField) ITNodeInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNodeInfoDo) FirstOrInit() (*model.TNodeInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNodeInfo), nil
	}
}

func (t tNodeInfoDo) FirstOrCreate() (*model.TNodeInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNodeInfo), nil
	}
}

func (t tNodeInfoDo) FindByPage(offset int, limit int) (result []*model.TNodeInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNodeInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNodeInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNodeInfoDo) Delete(models ...*model.TNodeInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNodeInfoDo) withDO(do gen.Dao) *tNodeInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
