// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/realcaishen/utils-go/dal/model"
)

func newTKv(db *gorm.DB, opts ...gen.DOOption) tKv {
	_tKv := tKv{}

	_tKv.tKvDo.UseDB(db, opts...)
	_tKv.tKvDo.UseModel(&model.TKv{})

	tableName := _tKv.tKvDo.TableName()
	_tKv.ALL = field.NewAsterisk(tableName)
	_tKv.Key = field.NewString(tableName, "key")
	_tKv.Value = field.NewString(tableName, "value")

	_tKv.fillFieldMap()

	return _tKv
}

type tKv struct {
	tKvDo tKvDo

	ALL   field.Asterisk
	Key   field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (t tKv) Table(newTableName string) *tKv {
	t.tKvDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKv) As(alias string) *tKv {
	t.tKvDo.DO = *(t.tKvDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKv) updateTableName(table string) *tKv {
	t.ALL = field.NewAsterisk(table)
	t.Key = field.NewString(table, "key")
	t.Value = field.NewString(table, "value")

	t.fillFieldMap()

	return t
}

func (t *tKv) WithContext(ctx context.Context) ITKvDo { return t.tKvDo.WithContext(ctx) }

func (t tKv) TableName() string { return t.tKvDo.TableName() }

func (t tKv) Alias() string { return t.tKvDo.Alias() }

func (t tKv) Columns(cols ...field.Expr) gen.Columns { return t.tKvDo.Columns(cols...) }

func (t *tKv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKv) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["key"] = t.Key
	t.fieldMap["value"] = t.Value
}

func (t tKv) clone(db *gorm.DB) tKv {
	t.tKvDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKv) replaceDB(db *gorm.DB) tKv {
	t.tKvDo.ReplaceDB(db)
	return t
}

type tKvDo struct{ gen.DO }

type ITKvDo interface {
	gen.SubQuery
	Debug() ITKvDo
	WithContext(ctx context.Context) ITKvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKvDo
	WriteDB() ITKvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKvDo
	Not(conds ...gen.Condition) ITKvDo
	Or(conds ...gen.Condition) ITKvDo
	Select(conds ...field.Expr) ITKvDo
	Where(conds ...gen.Condition) ITKvDo
	Order(conds ...field.Expr) ITKvDo
	Distinct(cols ...field.Expr) ITKvDo
	Omit(cols ...field.Expr) ITKvDo
	Join(table schema.Tabler, on ...field.Expr) ITKvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKvDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKvDo
	Group(cols ...field.Expr) ITKvDo
	Having(conds ...gen.Condition) ITKvDo
	Limit(limit int) ITKvDo
	Offset(offset int) ITKvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKvDo
	Unscoped() ITKvDo
	Create(values ...*model.TKv) error
	CreateInBatches(values []*model.TKv, batchSize int) error
	Save(values ...*model.TKv) error
	First() (*model.TKv, error)
	Take() (*model.TKv, error)
	Last() (*model.TKv, error)
	Find() ([]*model.TKv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKv, err error)
	FindInBatches(result *[]*model.TKv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKvDo
	Assign(attrs ...field.AssignExpr) ITKvDo
	Joins(fields ...field.RelationField) ITKvDo
	Preload(fields ...field.RelationField) ITKvDo
	FirstOrInit() (*model.TKv, error)
	FirstOrCreate() (*model.TKv, error)
	FindByPage(offset int, limit int) (result []*model.TKv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKvDo) Debug() ITKvDo {
	return t.withDO(t.DO.Debug())
}

func (t tKvDo) WithContext(ctx context.Context) ITKvDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKvDo) ReadDB() ITKvDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKvDo) WriteDB() ITKvDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKvDo) Session(config *gorm.Session) ITKvDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKvDo) Clauses(conds ...clause.Expression) ITKvDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKvDo) Returning(value interface{}, columns ...string) ITKvDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKvDo) Not(conds ...gen.Condition) ITKvDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKvDo) Or(conds ...gen.Condition) ITKvDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKvDo) Select(conds ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKvDo) Where(conds ...gen.Condition) ITKvDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKvDo) Order(conds ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKvDo) Distinct(cols ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKvDo) Omit(cols ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKvDo) Join(table schema.Tabler, on ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKvDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKvDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKvDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKvDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKvDo) Group(cols ...field.Expr) ITKvDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKvDo) Having(conds ...gen.Condition) ITKvDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKvDo) Limit(limit int) ITKvDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKvDo) Offset(offset int) ITKvDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKvDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKvDo) Unscoped() ITKvDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKvDo) Create(values ...*model.TKv) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKvDo) CreateInBatches(values []*model.TKv, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKvDo) Save(values ...*model.TKv) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKvDo) First() (*model.TKv, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKv), nil
	}
}

func (t tKvDo) Take() (*model.TKv, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKv), nil
	}
}

func (t tKvDo) Last() (*model.TKv, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKv), nil
	}
}

func (t tKvDo) Find() ([]*model.TKv, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKv), err
}

func (t tKvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKv, err error) {
	buf := make([]*model.TKv, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKvDo) FindInBatches(result *[]*model.TKv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKvDo) Attrs(attrs ...field.AssignExpr) ITKvDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKvDo) Assign(attrs ...field.AssignExpr) ITKvDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKvDo) Joins(fields ...field.RelationField) ITKvDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKvDo) Preload(fields ...field.RelationField) ITKvDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKvDo) FirstOrInit() (*model.TKv, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKv), nil
	}
}

func (t tKvDo) FirstOrCreate() (*model.TKv, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKv), nil
	}
}

func (t tKvDo) FindByPage(offset int, limit int) (result []*model.TKv, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKvDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKvDo) Delete(models ...*model.TKv) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKvDo) withDO(do gen.Dao) *tKvDo {
	t.DO = *do.(*gen.DO)
	return t
}
