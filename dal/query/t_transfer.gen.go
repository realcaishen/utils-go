// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/realcaishen/utils-go/dal/model"
)

func newTTransfer(db *gorm.DB, opts ...gen.DOOption) tTransfer {
	_tTransfer := tTransfer{}

	_tTransfer.tTransferDo.UseDB(db, opts...)
	_tTransfer.tTransferDo.UseModel(&model.TTransfer{})

	tableName := _tTransfer.tTransferDo.TableName()
	_tTransfer.ALL = field.NewAsterisk(tableName)
	_tTransfer.ID = field.NewInt64(tableName, "id")
	_tTransfer.Chainid = field.NewInt32(tableName, "chainid")
	_tTransfer.FromAddress = field.NewString(tableName, "from_address")
	_tTransfer.ToAddress = field.NewString(tableName, "to_address")
	_tTransfer.Value = field.NewString(tableName, "value")
	_tTransfer.IsProcessed = field.NewInt32(tableName, "is_processed")
	_tTransfer.IsInvalid = field.NewInt32(tableName, "is_invalid")
	_tTransfer.UpdateTimestamp = field.NewTime(tableName, "update_timestamp")
	_tTransfer.InsertTimestamp = field.NewTime(tableName, "insert_timestamp")
	_tTransfer.Hash = field.NewString(tableName, "hash")
	_tTransfer.SourceTable = field.NewString(tableName, "source_table")
	_tTransfer.SourceItemID = field.NewInt64(tableName, "source_item_id")
	_tTransfer.TokenAddress = field.NewString(tableName, "token_address")

	_tTransfer.fillFieldMap()

	return _tTransfer
}

type tTransfer struct {
	tTransferDo tTransferDo

	ALL             field.Asterisk
	ID              field.Int64
	Chainid         field.Int32
	FromAddress     field.String
	ToAddress       field.String
	Value           field.String
	IsProcessed     field.Int32
	IsInvalid       field.Int32
	UpdateTimestamp field.Time
	InsertTimestamp field.Time
	Hash            field.String
	SourceTable     field.String
	SourceItemID    field.Int64
	TokenAddress    field.String

	fieldMap map[string]field.Expr
}

func (t tTransfer) Table(newTableName string) *tTransfer {
	t.tTransferDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTransfer) As(alias string) *tTransfer {
	t.tTransferDo.DO = *(t.tTransferDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTransfer) updateTableName(table string) *tTransfer {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Chainid = field.NewInt32(table, "chainid")
	t.FromAddress = field.NewString(table, "from_address")
	t.ToAddress = field.NewString(table, "to_address")
	t.Value = field.NewString(table, "value")
	t.IsProcessed = field.NewInt32(table, "is_processed")
	t.IsInvalid = field.NewInt32(table, "is_invalid")
	t.UpdateTimestamp = field.NewTime(table, "update_timestamp")
	t.InsertTimestamp = field.NewTime(table, "insert_timestamp")
	t.Hash = field.NewString(table, "hash")
	t.SourceTable = field.NewString(table, "source_table")
	t.SourceItemID = field.NewInt64(table, "source_item_id")
	t.TokenAddress = field.NewString(table, "token_address")

	t.fillFieldMap()

	return t
}

func (t *tTransfer) WithContext(ctx context.Context) ITTransferDo {
	return t.tTransferDo.WithContext(ctx)
}

func (t tTransfer) TableName() string { return t.tTransferDo.TableName() }

func (t tTransfer) Alias() string { return t.tTransferDo.Alias() }

func (t tTransfer) Columns(cols ...field.Expr) gen.Columns { return t.tTransferDo.Columns(cols...) }

func (t *tTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTransfer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["chainid"] = t.Chainid
	t.fieldMap["from_address"] = t.FromAddress
	t.fieldMap["to_address"] = t.ToAddress
	t.fieldMap["value"] = t.Value
	t.fieldMap["is_processed"] = t.IsProcessed
	t.fieldMap["is_invalid"] = t.IsInvalid
	t.fieldMap["update_timestamp"] = t.UpdateTimestamp
	t.fieldMap["insert_timestamp"] = t.InsertTimestamp
	t.fieldMap["hash"] = t.Hash
	t.fieldMap["source_table"] = t.SourceTable
	t.fieldMap["source_item_id"] = t.SourceItemID
	t.fieldMap["token_address"] = t.TokenAddress
}

func (t tTransfer) clone(db *gorm.DB) tTransfer {
	t.tTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTransfer) replaceDB(db *gorm.DB) tTransfer {
	t.tTransferDo.ReplaceDB(db)
	return t
}

type tTransferDo struct{ gen.DO }

type ITTransferDo interface {
	gen.SubQuery
	Debug() ITTransferDo
	WithContext(ctx context.Context) ITTransferDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTransferDo
	WriteDB() ITTransferDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTransferDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTransferDo
	Not(conds ...gen.Condition) ITTransferDo
	Or(conds ...gen.Condition) ITTransferDo
	Select(conds ...field.Expr) ITTransferDo
	Where(conds ...gen.Condition) ITTransferDo
	Order(conds ...field.Expr) ITTransferDo
	Distinct(cols ...field.Expr) ITTransferDo
	Omit(cols ...field.Expr) ITTransferDo
	Join(table schema.Tabler, on ...field.Expr) ITTransferDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTransferDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTransferDo
	Group(cols ...field.Expr) ITTransferDo
	Having(conds ...gen.Condition) ITTransferDo
	Limit(limit int) ITTransferDo
	Offset(offset int) ITTransferDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTransferDo
	Unscoped() ITTransferDo
	Create(values ...*model.TTransfer) error
	CreateInBatches(values []*model.TTransfer, batchSize int) error
	Save(values ...*model.TTransfer) error
	First() (*model.TTransfer, error)
	Take() (*model.TTransfer, error)
	Last() (*model.TTransfer, error)
	Find() ([]*model.TTransfer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTransfer, err error)
	FindInBatches(result *[]*model.TTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTransfer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTransferDo
	Assign(attrs ...field.AssignExpr) ITTransferDo
	Joins(fields ...field.RelationField) ITTransferDo
	Preload(fields ...field.RelationField) ITTransferDo
	FirstOrInit() (*model.TTransfer, error)
	FirstOrCreate() (*model.TTransfer, error)
	FindByPage(offset int, limit int) (result []*model.TTransfer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTransferDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTransferDo) Debug() ITTransferDo {
	return t.withDO(t.DO.Debug())
}

func (t tTransferDo) WithContext(ctx context.Context) ITTransferDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTransferDo) ReadDB() ITTransferDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTransferDo) WriteDB() ITTransferDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTransferDo) Session(config *gorm.Session) ITTransferDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTransferDo) Clauses(conds ...clause.Expression) ITTransferDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTransferDo) Returning(value interface{}, columns ...string) ITTransferDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTransferDo) Not(conds ...gen.Condition) ITTransferDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTransferDo) Or(conds ...gen.Condition) ITTransferDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTransferDo) Select(conds ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTransferDo) Where(conds ...gen.Condition) ITTransferDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTransferDo) Order(conds ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTransferDo) Distinct(cols ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTransferDo) Omit(cols ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTransferDo) Join(table schema.Tabler, on ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTransferDo) Group(cols ...field.Expr) ITTransferDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTransferDo) Having(conds ...gen.Condition) ITTransferDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTransferDo) Limit(limit int) ITTransferDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTransferDo) Offset(offset int) ITTransferDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTransferDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTransferDo) Unscoped() ITTransferDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTransferDo) Create(values ...*model.TTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTransferDo) CreateInBatches(values []*model.TTransfer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTransferDo) Save(values ...*model.TTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTransferDo) First() (*model.TTransfer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTransfer), nil
	}
}

func (t tTransferDo) Take() (*model.TTransfer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTransfer), nil
	}
}

func (t tTransferDo) Last() (*model.TTransfer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTransfer), nil
	}
}

func (t tTransferDo) Find() ([]*model.TTransfer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTransfer), err
}

func (t tTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTransfer, err error) {
	buf := make([]*model.TTransfer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTransferDo) FindInBatches(result *[]*model.TTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTransferDo) Attrs(attrs ...field.AssignExpr) ITTransferDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTransferDo) Assign(attrs ...field.AssignExpr) ITTransferDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTransferDo) Joins(fields ...field.RelationField) ITTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTransferDo) Preload(fields ...field.RelationField) ITTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTransferDo) FirstOrInit() (*model.TTransfer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTransfer), nil
	}
}

func (t tTransferDo) FirstOrCreate() (*model.TTransfer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTransfer), nil
	}
}

func (t tTransferDo) FindByPage(offset int, limit int) (result []*model.TTransfer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTransferDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTransferDo) Delete(models ...*model.TTransfer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTransferDo) withDO(do gen.Dao) *tTransferDo {
	t.DO = *do.(*gen.DO)
	return t
}
