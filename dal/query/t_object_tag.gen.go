// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/realcaishen/utils-go/dal/model"
)

func newTObjectTag(db *gorm.DB, opts ...gen.DOOption) tObjectTag {
	_tObjectTag := tObjectTag{}

	_tObjectTag.tObjectTagDo.UseDB(db, opts...)
	_tObjectTag.tObjectTagDo.UseModel(&model.TObjectTag{})

	tableName := _tObjectTag.tObjectTagDo.TableName()
	_tObjectTag.ALL = field.NewAsterisk(tableName)
	_tObjectTag.ObjectTable = field.NewString(tableName, "object_table")
	_tObjectTag.ObjectID = field.NewInt64(tableName, "object_id")
	_tObjectTag.TagID = field.NewInt64(tableName, "tag_id")
	_tObjectTag.UpdateTimestamp = field.NewTime(tableName, "update_timestamp")
	_tObjectTag.InsertTimestamp = field.NewTime(tableName, "insert_timestamp")

	_tObjectTag.fillFieldMap()

	return _tObjectTag
}

type tObjectTag struct {
	tObjectTagDo tObjectTagDo

	ALL             field.Asterisk
	ObjectTable     field.String
	ObjectID        field.Int64
	TagID           field.Int64
	UpdateTimestamp field.Time
	InsertTimestamp field.Time

	fieldMap map[string]field.Expr
}

func (t tObjectTag) Table(newTableName string) *tObjectTag {
	t.tObjectTagDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tObjectTag) As(alias string) *tObjectTag {
	t.tObjectTagDo.DO = *(t.tObjectTagDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tObjectTag) updateTableName(table string) *tObjectTag {
	t.ALL = field.NewAsterisk(table)
	t.ObjectTable = field.NewString(table, "object_table")
	t.ObjectID = field.NewInt64(table, "object_id")
	t.TagID = field.NewInt64(table, "tag_id")
	t.UpdateTimestamp = field.NewTime(table, "update_timestamp")
	t.InsertTimestamp = field.NewTime(table, "insert_timestamp")

	t.fillFieldMap()

	return t
}

func (t *tObjectTag) WithContext(ctx context.Context) ITObjectTagDo {
	return t.tObjectTagDo.WithContext(ctx)
}

func (t tObjectTag) TableName() string { return t.tObjectTagDo.TableName() }

func (t tObjectTag) Alias() string { return t.tObjectTagDo.Alias() }

func (t tObjectTag) Columns(cols ...field.Expr) gen.Columns { return t.tObjectTagDo.Columns(cols...) }

func (t *tObjectTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tObjectTag) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["object_table"] = t.ObjectTable
	t.fieldMap["object_id"] = t.ObjectID
	t.fieldMap["tag_id"] = t.TagID
	t.fieldMap["update_timestamp"] = t.UpdateTimestamp
	t.fieldMap["insert_timestamp"] = t.InsertTimestamp
}

func (t tObjectTag) clone(db *gorm.DB) tObjectTag {
	t.tObjectTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tObjectTag) replaceDB(db *gorm.DB) tObjectTag {
	t.tObjectTagDo.ReplaceDB(db)
	return t
}

type tObjectTagDo struct{ gen.DO }

type ITObjectTagDo interface {
	gen.SubQuery
	Debug() ITObjectTagDo
	WithContext(ctx context.Context) ITObjectTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITObjectTagDo
	WriteDB() ITObjectTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITObjectTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITObjectTagDo
	Not(conds ...gen.Condition) ITObjectTagDo
	Or(conds ...gen.Condition) ITObjectTagDo
	Select(conds ...field.Expr) ITObjectTagDo
	Where(conds ...gen.Condition) ITObjectTagDo
	Order(conds ...field.Expr) ITObjectTagDo
	Distinct(cols ...field.Expr) ITObjectTagDo
	Omit(cols ...field.Expr) ITObjectTagDo
	Join(table schema.Tabler, on ...field.Expr) ITObjectTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITObjectTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITObjectTagDo
	Group(cols ...field.Expr) ITObjectTagDo
	Having(conds ...gen.Condition) ITObjectTagDo
	Limit(limit int) ITObjectTagDo
	Offset(offset int) ITObjectTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITObjectTagDo
	Unscoped() ITObjectTagDo
	Create(values ...*model.TObjectTag) error
	CreateInBatches(values []*model.TObjectTag, batchSize int) error
	Save(values ...*model.TObjectTag) error
	First() (*model.TObjectTag, error)
	Take() (*model.TObjectTag, error)
	Last() (*model.TObjectTag, error)
	Find() ([]*model.TObjectTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TObjectTag, err error)
	FindInBatches(result *[]*model.TObjectTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TObjectTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITObjectTagDo
	Assign(attrs ...field.AssignExpr) ITObjectTagDo
	Joins(fields ...field.RelationField) ITObjectTagDo
	Preload(fields ...field.RelationField) ITObjectTagDo
	FirstOrInit() (*model.TObjectTag, error)
	FirstOrCreate() (*model.TObjectTag, error)
	FindByPage(offset int, limit int) (result []*model.TObjectTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITObjectTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tObjectTagDo) Debug() ITObjectTagDo {
	return t.withDO(t.DO.Debug())
}

func (t tObjectTagDo) WithContext(ctx context.Context) ITObjectTagDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tObjectTagDo) ReadDB() ITObjectTagDo {
	return t.Clauses(dbresolver.Read)
}

func (t tObjectTagDo) WriteDB() ITObjectTagDo {
	return t.Clauses(dbresolver.Write)
}

func (t tObjectTagDo) Session(config *gorm.Session) ITObjectTagDo {
	return t.withDO(t.DO.Session(config))
}

func (t tObjectTagDo) Clauses(conds ...clause.Expression) ITObjectTagDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tObjectTagDo) Returning(value interface{}, columns ...string) ITObjectTagDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tObjectTagDo) Not(conds ...gen.Condition) ITObjectTagDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tObjectTagDo) Or(conds ...gen.Condition) ITObjectTagDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tObjectTagDo) Select(conds ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tObjectTagDo) Where(conds ...gen.Condition) ITObjectTagDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tObjectTagDo) Order(conds ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tObjectTagDo) Distinct(cols ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tObjectTagDo) Omit(cols ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tObjectTagDo) Join(table schema.Tabler, on ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tObjectTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tObjectTagDo) RightJoin(table schema.Tabler, on ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tObjectTagDo) Group(cols ...field.Expr) ITObjectTagDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tObjectTagDo) Having(conds ...gen.Condition) ITObjectTagDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tObjectTagDo) Limit(limit int) ITObjectTagDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tObjectTagDo) Offset(offset int) ITObjectTagDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tObjectTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITObjectTagDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tObjectTagDo) Unscoped() ITObjectTagDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tObjectTagDo) Create(values ...*model.TObjectTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tObjectTagDo) CreateInBatches(values []*model.TObjectTag, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tObjectTagDo) Save(values ...*model.TObjectTag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tObjectTagDo) First() (*model.TObjectTag, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TObjectTag), nil
	}
}

func (t tObjectTagDo) Take() (*model.TObjectTag, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TObjectTag), nil
	}
}

func (t tObjectTagDo) Last() (*model.TObjectTag, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TObjectTag), nil
	}
}

func (t tObjectTagDo) Find() ([]*model.TObjectTag, error) {
	result, err := t.DO.Find()
	return result.([]*model.TObjectTag), err
}

func (t tObjectTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TObjectTag, err error) {
	buf := make([]*model.TObjectTag, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tObjectTagDo) FindInBatches(result *[]*model.TObjectTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tObjectTagDo) Attrs(attrs ...field.AssignExpr) ITObjectTagDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tObjectTagDo) Assign(attrs ...field.AssignExpr) ITObjectTagDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tObjectTagDo) Joins(fields ...field.RelationField) ITObjectTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tObjectTagDo) Preload(fields ...field.RelationField) ITObjectTagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tObjectTagDo) FirstOrInit() (*model.TObjectTag, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TObjectTag), nil
	}
}

func (t tObjectTagDo) FirstOrCreate() (*model.TObjectTag, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TObjectTag), nil
	}
}

func (t tObjectTagDo) FindByPage(offset int, limit int) (result []*model.TObjectTag, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tObjectTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tObjectTagDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tObjectTagDo) Delete(models ...*model.TObjectTag) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tObjectTagDo) withDO(do gen.Dao) *tObjectTagDo {
	t.DO = *do.(*gen.DO)
	return t
}
