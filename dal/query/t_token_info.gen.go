// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/realcaishen/utils-go/dal/model"
)

func newTTokenInfo(db *gorm.DB, opts ...gen.DOOption) tTokenInfo {
	_tTokenInfo := tTokenInfo{}

	_tTokenInfo.tTokenInfoDo.UseDB(db, opts...)
	_tTokenInfo.tTokenInfoDo.UseModel(&model.TTokenInfo{})

	tableName := _tTokenInfo.tTokenInfoDo.TableName()
	_tTokenInfo.ALL = field.NewAsterisk(tableName)
	_tTokenInfo.ID = field.NewInt64(tableName, "id")
	_tTokenInfo.UpdateTimestamp = field.NewTime(tableName, "update_timestamp")
	_tTokenInfo.InsertTimestamp = field.NewTime(tableName, "insert_timestamp")
	_tTokenInfo.TokenName = field.NewString(tableName, "token_name")
	_tTokenInfo.ChainName = field.NewString(tableName, "chain_name")
	_tTokenInfo.TokenAddress = field.NewString(tableName, "token_address")
	_tTokenInfo.Decimals = field.NewInt32(tableName, "decimals")
	_tTokenInfo.FullName = field.NewString(tableName, "full_name")
	_tTokenInfo.TotalSupply = field.NewField(tableName, "total_supply")
	_tTokenInfo.DiscoverTimestamp = field.NewTime(tableName, "discover_timestamp")
	_tTokenInfo.Icon = field.NewString(tableName, "icon")
	_tTokenInfo.Twitter = field.NewString(tableName, "twitter")
	_tTokenInfo.Telegram = field.NewString(tableName, "telegram")
	_tTokenInfo.Website = field.NewString(tableName, "website")
	_tTokenInfo.Discord = field.NewString(tableName, "discord")
	_tTokenInfo.Mcap = field.NewFloat64(tableName, "mcap")
	_tTokenInfo.Fdv = field.NewFloat64(tableName, "fdv")
	_tTokenInfo.Volume24h = field.NewFloat64(tableName, "volume24h")
	_tTokenInfo.Pricechg24h = field.NewFloat64(tableName, "pricechg24h")
	_tTokenInfo.Pricechg6h = field.NewFloat64(tableName, "pricechg6h")

	_tTokenInfo.fillFieldMap()

	return _tTokenInfo
}

type tTokenInfo struct {
	tTokenInfoDo tTokenInfoDo

	ALL               field.Asterisk
	ID                field.Int64
	UpdateTimestamp   field.Time
	InsertTimestamp   field.Time
	TokenName         field.String
	ChainName         field.String
	TokenAddress      field.String
	Decimals          field.Int32
	FullName          field.String
	TotalSupply       field.Field
	DiscoverTimestamp field.Time
	Icon              field.String
	Twitter           field.String
	Telegram          field.String
	Website           field.String
	Discord           field.String
	Mcap              field.Float64
	Fdv               field.Float64
	Volume24h         field.Float64
	Pricechg24h       field.Float64
	Pricechg6h        field.Float64

	fieldMap map[string]field.Expr
}

func (t tTokenInfo) Table(newTableName string) *tTokenInfo {
	t.tTokenInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTokenInfo) As(alias string) *tTokenInfo {
	t.tTokenInfoDo.DO = *(t.tTokenInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTokenInfo) updateTableName(table string) *tTokenInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UpdateTimestamp = field.NewTime(table, "update_timestamp")
	t.InsertTimestamp = field.NewTime(table, "insert_timestamp")
	t.TokenName = field.NewString(table, "token_name")
	t.ChainName = field.NewString(table, "chain_name")
	t.TokenAddress = field.NewString(table, "token_address")
	t.Decimals = field.NewInt32(table, "decimals")
	t.FullName = field.NewString(table, "full_name")
	t.TotalSupply = field.NewField(table, "total_supply")
	t.DiscoverTimestamp = field.NewTime(table, "discover_timestamp")
	t.Icon = field.NewString(table, "icon")
	t.Twitter = field.NewString(table, "twitter")
	t.Telegram = field.NewString(table, "telegram")
	t.Website = field.NewString(table, "website")
	t.Discord = field.NewString(table, "discord")
	t.Mcap = field.NewFloat64(table, "mcap")
	t.Fdv = field.NewFloat64(table, "fdv")
	t.Volume24h = field.NewFloat64(table, "volume24h")
	t.Pricechg24h = field.NewFloat64(table, "pricechg24h")
	t.Pricechg6h = field.NewFloat64(table, "pricechg6h")

	t.fillFieldMap()

	return t
}

func (t *tTokenInfo) WithContext(ctx context.Context) ITTokenInfoDo {
	return t.tTokenInfoDo.WithContext(ctx)
}

func (t tTokenInfo) TableName() string { return t.tTokenInfoDo.TableName() }

func (t tTokenInfo) Alias() string { return t.tTokenInfoDo.Alias() }

func (t tTokenInfo) Columns(cols ...field.Expr) gen.Columns { return t.tTokenInfoDo.Columns(cols...) }

func (t *tTokenInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTokenInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["update_timestamp"] = t.UpdateTimestamp
	t.fieldMap["insert_timestamp"] = t.InsertTimestamp
	t.fieldMap["token_name"] = t.TokenName
	t.fieldMap["chain_name"] = t.ChainName
	t.fieldMap["token_address"] = t.TokenAddress
	t.fieldMap["decimals"] = t.Decimals
	t.fieldMap["full_name"] = t.FullName
	t.fieldMap["total_supply"] = t.TotalSupply
	t.fieldMap["discover_timestamp"] = t.DiscoverTimestamp
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["twitter"] = t.Twitter
	t.fieldMap["telegram"] = t.Telegram
	t.fieldMap["website"] = t.Website
	t.fieldMap["discord"] = t.Discord
	t.fieldMap["mcap"] = t.Mcap
	t.fieldMap["fdv"] = t.Fdv
	t.fieldMap["volume24h"] = t.Volume24h
	t.fieldMap["pricechg24h"] = t.Pricechg24h
	t.fieldMap["pricechg6h"] = t.Pricechg6h
}

func (t tTokenInfo) clone(db *gorm.DB) tTokenInfo {
	t.tTokenInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTokenInfo) replaceDB(db *gorm.DB) tTokenInfo {
	t.tTokenInfoDo.ReplaceDB(db)
	return t
}

type tTokenInfoDo struct{ gen.DO }

type ITTokenInfoDo interface {
	gen.SubQuery
	Debug() ITTokenInfoDo
	WithContext(ctx context.Context) ITTokenInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTokenInfoDo
	WriteDB() ITTokenInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTokenInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTokenInfoDo
	Not(conds ...gen.Condition) ITTokenInfoDo
	Or(conds ...gen.Condition) ITTokenInfoDo
	Select(conds ...field.Expr) ITTokenInfoDo
	Where(conds ...gen.Condition) ITTokenInfoDo
	Order(conds ...field.Expr) ITTokenInfoDo
	Distinct(cols ...field.Expr) ITTokenInfoDo
	Omit(cols ...field.Expr) ITTokenInfoDo
	Join(table schema.Tabler, on ...field.Expr) ITTokenInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTokenInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTokenInfoDo
	Group(cols ...field.Expr) ITTokenInfoDo
	Having(conds ...gen.Condition) ITTokenInfoDo
	Limit(limit int) ITTokenInfoDo
	Offset(offset int) ITTokenInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTokenInfoDo
	Unscoped() ITTokenInfoDo
	Create(values ...*model.TTokenInfo) error
	CreateInBatches(values []*model.TTokenInfo, batchSize int) error
	Save(values ...*model.TTokenInfo) error
	First() (*model.TTokenInfo, error)
	Take() (*model.TTokenInfo, error)
	Last() (*model.TTokenInfo, error)
	Find() ([]*model.TTokenInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTokenInfo, err error)
	FindInBatches(result *[]*model.TTokenInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTokenInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTokenInfoDo
	Assign(attrs ...field.AssignExpr) ITTokenInfoDo
	Joins(fields ...field.RelationField) ITTokenInfoDo
	Preload(fields ...field.RelationField) ITTokenInfoDo
	FirstOrInit() (*model.TTokenInfo, error)
	FirstOrCreate() (*model.TTokenInfo, error)
	FindByPage(offset int, limit int) (result []*model.TTokenInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTokenInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTokenInfoDo) Debug() ITTokenInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tTokenInfoDo) WithContext(ctx context.Context) ITTokenInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTokenInfoDo) ReadDB() ITTokenInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTokenInfoDo) WriteDB() ITTokenInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTokenInfoDo) Session(config *gorm.Session) ITTokenInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTokenInfoDo) Clauses(conds ...clause.Expression) ITTokenInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTokenInfoDo) Returning(value interface{}, columns ...string) ITTokenInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTokenInfoDo) Not(conds ...gen.Condition) ITTokenInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTokenInfoDo) Or(conds ...gen.Condition) ITTokenInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTokenInfoDo) Select(conds ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTokenInfoDo) Where(conds ...gen.Condition) ITTokenInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTokenInfoDo) Order(conds ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTokenInfoDo) Distinct(cols ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTokenInfoDo) Omit(cols ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTokenInfoDo) Join(table schema.Tabler, on ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTokenInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTokenInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTokenInfoDo) Group(cols ...field.Expr) ITTokenInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTokenInfoDo) Having(conds ...gen.Condition) ITTokenInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTokenInfoDo) Limit(limit int) ITTokenInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTokenInfoDo) Offset(offset int) ITTokenInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTokenInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTokenInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTokenInfoDo) Unscoped() ITTokenInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTokenInfoDo) Create(values ...*model.TTokenInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTokenInfoDo) CreateInBatches(values []*model.TTokenInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTokenInfoDo) Save(values ...*model.TTokenInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTokenInfoDo) First() (*model.TTokenInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTokenInfo), nil
	}
}

func (t tTokenInfoDo) Take() (*model.TTokenInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTokenInfo), nil
	}
}

func (t tTokenInfoDo) Last() (*model.TTokenInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTokenInfo), nil
	}
}

func (t tTokenInfoDo) Find() ([]*model.TTokenInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTokenInfo), err
}

func (t tTokenInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTokenInfo, err error) {
	buf := make([]*model.TTokenInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTokenInfoDo) FindInBatches(result *[]*model.TTokenInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTokenInfoDo) Attrs(attrs ...field.AssignExpr) ITTokenInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTokenInfoDo) Assign(attrs ...field.AssignExpr) ITTokenInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTokenInfoDo) Joins(fields ...field.RelationField) ITTokenInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTokenInfoDo) Preload(fields ...field.RelationField) ITTokenInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTokenInfoDo) FirstOrInit() (*model.TTokenInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTokenInfo), nil
	}
}

func (t tTokenInfoDo) FirstOrCreate() (*model.TTokenInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTokenInfo), nil
	}
}

func (t tTokenInfoDo) FindByPage(offset int, limit int) (result []*model.TTokenInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTokenInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTokenInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTokenInfoDo) Delete(models ...*model.TTokenInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTokenInfoDo) withDO(do gen.Dao) *tTokenInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
